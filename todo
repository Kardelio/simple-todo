#!/bin/bash
workingDir=$(dirname "$0")
if ! [[ -a "$HOME/.todoconfig" ]];then
	echo -e "\033[30;43mFirst use of todo, copying config to ~/.todoconfig...\033[0m"
	cp "$workingDir/.todoconfig" "$HOME"
fi
source "$HOME/.todoconfig" 
numberRegex='^[0-9]+$'
pattern="+++"
DEFAULTPRIORITY="NORMAL"
PRIORITYIN=2
EMPTYTAG="EMPTY"
TAGIN="EMPTY"

file="$HOME/.todo"
transfile="$HOME/.tododel"
colr="\033[${borderColorFront};${borderColorBack}m"
flsh="\033[1;${tagColorFront};${tagColorBack}m" #removed 5
reset="\033[0m"

function printHelp(){
	echo "Help..."
	cat "$workingDir/README.md"
}

function resetConfig(){
	echo "Resetting the CONFIG file"
	rm "$HOME/.todoconfig"
	cp "$workingDir/.todoconfig" "$HOME"	
}

function editTicket(){
	echo "Editing... $1"
	if [[ $1 =~ $numberRegex ]] ; then
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $num == $1 ]]; then
				echo "Editing a ... "
				echo -e "$colr $num $reset:$priStr $body"
				#Edit...
				echo "Type the new text for the todo item... (leave blank to not change)"
				read bodyNew </dev/tty
				if ! [[ -z $bodyNew ]]; then
					body=$bodyNew
				fi
				echo "Type the new tag for the item... (leave blank to not change)"
				read tagNew </dev/tty
				if ! [[ -z $tagNew ]]; then
					consumeTag $tagNew
				else
					consumeTag $tag
				fi
				echo "Type priority for the todo item... (leave blank to not change)"
				read priNew </dev/tty
				if ! [[ -z $priNew ]]; then
					consumePriority $priNew
				else
					consumePriority $pri
				fi
				#issue here TAGIN and PRINTIN are using defaults if not set
				echo "$internalcount+++$TAGIN+++$body+++$PRIORITYIN" >> $transfile
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
				fi
			fi
			internalcount=$((internalcount + 1))
		done < "$file"

		if [[ -f  $transfile ]]; then
			cat $transfile > "$file"
			rm $transfile
		else
			> "$file"
		fi
	else
		echo "Only editing using the items ID is enabled at the moment..."
	fi
	displayAllTodos
}

function completedTask(){
	if [[ $1 =~ $numberRegex ]] ; then
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $num == $1 ]]; then
				echo -e "Deleting... $colr $num $reset:$priStr $body"
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
					internalcount=$((internalcount + 1))
				fi
			fi
		done < "$file"
	else
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $body =~ $1 ]]; then
				echo -e "Deleting... $colr $num $reset:$priStr $body"
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
					internalcount=$((internalcount + 1))
				fi
			fi
		done < "$file"
	fi
	if [[ -f  $transfile ]]; then
		cat $transfile > "$file"
		rm $transfile
	else
		> "$file"
	fi
	displayAllTodos
}

function generateNum(){
	numberOfLines=$(wc -l < $file)
	echo $numberOfLines
}

function consumeTag(){
	TAGIN=$1
}

function consumePriority(){
	#Here is the issue
	if [[ $1 =~ $numberRegex ]] ; then
		if [[ $1 -le "${#priorityMap[@]}" ]] ; then
			PRIORITYIN=$1
		else
			echo "Thats error (NaN)"
			exit 1
		fi
	else
		didMatchOne=false
		lowerIn=$(echo $1 | awk '{print tolower($0)}')
		upperIn=$(echo $1 | awk '{print toupper($0)}')
		for i in "${priorityMap[@]}"; do 
			splitText=${i%,*}
			splitText=${splitText#*,}
			splitText=${splitText%,*} 
			if [[ "$1" == "$splitText" ]] || [[ "$lowerIn" ==  "$splitText" ]] || [[ "$upperIn" ==  "$splitText" ]]; then
				splitFore=${i#*,}
				splitFore=${splitFore%,*}
				splitFore=${splitFore#*,}
				splitBack=${i##*,}
				splitNum=${i%%,*}
				PRIORITYIN=$splitNum
				didMatchOne=true
			fi
		done
		if ! $didMatchOne; then
			echo "Thats error"
			exit 1
		fi
	fi
}

function clearAllTodos(){
	> "$file"
}

function displayAllTodos(){
	linecount=$(generateNum)
	if [[ -a $file ]] && [[ $linecount -gt 0 ]];
	then
		echo -e "$colr    TODOs... $reset"
		while IFS='' read -r line || [[ -n "$line" ]]; do
			#1+++think about doing teaching sessions with next year cohort+++2
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ -n $tag ]] && [[ $tag != $EMPTYTAG ]]; then
				echo -e "$colr $num $reset:$priStr $flsh $tag $reset $body"
			else
				echo -e "$colr $num $reset:$priStr $body"
			fi
		done < "$file"
	else
		echo -e "\033[37;44m EMPTY TODOs \033[0m"
	fi
}

function returnPriorityStatus(){
	outStr=$DEFAULTPRIORITY
	for i in "${priorityMap[@]}"; do  
		splitNum=${i%%,*}
		if [[ $1 == "$splitNum" ]]; then
			splitText=${i%,*}
			splitText=${splitText#*,}
			splitText=${splitText%,*}
			splitFore=${i#*,}
			splitFore=${splitFore%,*}
			splitFore=${splitFore#*,}
			splitBack=${i##*,}
			outStr="\033[${splitFore};${splitBack}m ${splitText} \033[0m"
		fi
	done
	echo $outStr
}

control_c(){
	if [[ -f  $transfile ]]; then
		rm $transfile
	fi
	exit 1
}
trap control_c SIGINT

while getopts d:rce:p:t:h option
do
case "${option}"
in
c)
	resetConfig
	exit 0
	;;
d)
	completedTask ${OPTARG}
	exit 0
	;;
r)
	echo "REMOVING ALL TODOs"
	clearAllTodos
	exit 0
	;;
e)
	editTicket ${OPTARG}
	exit 0
	;;
p)
	consumePriority ${OPTARG}
	;;
t)
	consumeTag ${OPTARG}
	;;
h)
	printHelp
	exit 0
	;;
*)
	echo "Error unknown parameter! Use todo -h to get the available options..."
	exit 1
;;
esac
done
shift $((OPTIND-1)) #This pushes the parameters out the way and lets the positional parameters play ball

if [[ -z "$1" ]]; 
then
	displayAllTodos
else
	if [[ -a $file ]];
	then
		numberNow=$(generateNum)
		echo "$numberNow+++$TAGIN+++$1+++$PRIORITYIN" >> "$file"
	else
		touch "$file"
		echo "0+++$TAGIN+++$1+++$PRIORITYIN" > "$file"
	fi
	echo "Added to the list..."
	displayAllTodos
fi
