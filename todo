#!/bin/bash
#Takes in a single string and opt other e.g. priority
#and with no args it prints todo list
source .todoconfig 

numberRegex='^[0-9]+$'
pattern="+++"
DEFAULTPRIORITY="NORMAL"
PRIORITYIN=2
EMPTYTAG="EMPTY"
TAGIN="EMPTY"

file="$HOME/.todo"
transfile="$HOME/.tododel"
colr="\033[${borderColorFront};${borderColorBack}m"
flsh="\033[1;31;46m" #removed 5
reset="\033[0m"

function editTicket(){
	echo "Editing... $1"
	if [[ $1 =~ $numberRegex ]] ; then
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $num == $1 ]]; then
				echo "Editing a ... "
				echo -e "$colr $num $reset:$priStr $body"
				#Edit...
				echo "Type the new text for the todo item... (leave blank to not change)"
				read bodyNew </dev/tty
				if ! [[ -z $bodyNew ]]; then
					body=$bodyNew
				fi
				echo "Type the new tag for the item... (leave blank to not change)"
				read tagNew </dev/tty
				if ! [[ -z $tagNew ]]; then
					consumeTag $tagNew
				else
					consumeTag $tag
				fi
				echo "Type priority for the todo item... (leave blank to not change)"
				read priNew </dev/tty
				if ! [[ -z $priNew ]]; then
					consumePriority $priNew
				else
					consumePriority $pri
				fi
				#issue here TAGIN and PRINTIN are using defaults if not set
				echo "$internalcount+++$TAGIN+++$body+++$PRIORITYIN" >> $transfile
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
				fi
			fi
			internalcount=$((internalcount + 1))
		done < "$file"

		if [[ -f  $transfile ]]; then
			cat $transfile > "$file"
			rm $transfile
		else
			> "$file"
		fi
	else
		echo "Only editing using the items ID is enabled at the moment..."
	fi
}

function completedTask(){
	echo "Completed... $1"
	if [[ $1 =~ $numberRegex ]] ; then
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $num == $1 ]]; then
				echo "Deleting ... "
				echo -e "$colr $num $reset:$priStr $body"
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
					internalcount=$((internalcount + 1))
				fi
			fi
		done < "$file"
	else
		internalcount=0
		while IFS='' read -r line || [[ -n "$line" ]]; do
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ $body =~ $1 ]]; then
				echo "REG Deleting ... "
				echo -e "$colr $num $reset:$priStr $body"
			else
				if ! [[ -z "$line" ]]; then
					echo "$internalcount+++$tag+++$body+++$pri" >> $transfile
					internalcount=$((internalcount + 1))
				fi
			fi
		done < "$file"
	fi
	if [[ -f  $transfile ]]; then
		cat $transfile > "$file"
		rm $transfile
	else
		> "$file"
	fi
}

function generateNum(){
	numberOfLines=$(wc -l < $file)
	echo $numberOfLines
}

function consumeTag(){
	TAGIN=$1
}

function consumePriority(){
	if [[ $1 =~ $numberRegex ]] ; then
		if [[ $1 -le 3 ]] ; then
			PRIORITYIN=$1
		else
			echo "Thats error"
			exit 1
		fi
	else
		case "$1"
		in
		h|high|H|HIGH)
			PRIORITYIN=1
			;;
		n|norm|normal|N|NORM|NORMAL)
			PRIORITYIN=2
			;;
		l|low|L|LOW)
			PRIORITYIN=3
			;;
		*)
			echo "Thats error"
			exit 1
			;;
		esac
	fi
}

function clearAllTodos(){
	> "$file"
}

function returnPriorityStatus(){
	outStr=$DEFAULTPRIORITY
	if [[ $1 == "1" ]];
	then
		outStr="\033[37;41m HIGH \033[0m"
	elif [[ $1 == "2" ]];
	then
		outStr="\033[37;44m NORMAL \033[0m"
	else
		outStr="\033[30;42m LOW \033[0m"
	fi
	echo $outStr
}

control_c(){
	if [[ -f  $transfile ]]; then
		rm $transfile
	fi
	exit 1
}
trap control_c SIGINT

while getopts d:re:p:t:h option
do
case "${option}"
in
d)
	completedTask ${OPTARG}
	exit 0
	;;
r)
	echo "REMOVING ALL TODOs"
	clearAllTodos
	exit 0
	;;
e)
	editTicket ${OPTARG}
	exit 0
	;;
p)
	consumePriority ${OPTARG}
	;;
t)
	#Today flag!
	#Could be a flash tag insteaed, so -t optarg is a word to tage with e.g. today! / Now!
	echo "Tagging!"
	consumeTag ${OPTARG}
	;;
h)
	echo "HELP"
	echo "Printing Help..."
	exit 0
	;;
*)
	echo "Error unknown parameter!"
	exit 1
;;
esac
done
shift $((OPTIND-1)) #This pushes the parameters out the way and lets the positional parameters play ball

if [[ -z "$1" ]]; 
then
	linecount=$(generateNum)
	if [[ -a $file ]] && [[ $linecount -gt 0 ]];
	then
		echo -e "$colr    TODOs... $reset"
		while IFS='' read -r line || [[ -n "$line" ]]; do
			#1+++think about doing teaching sessions with next year cohort+++2
			body=${line#*$pattern} #retuns tag++body+++pri
			body=${body%$pattern*} #returns tag++body
			body=${body#*$pattern} #returns body
			tag=${line#*$pattern} #retuns tag++body+++pri
			tag=${tag%$pattern*} #returns tag++body
			tag=${tag%$pattern*} #returns tag
			num=${line%%$pattern*}
			pri=${line##*$pattern}
			#1+++TAG+++think about doing teaching sessions with next year cohort+++2
			#body=${line#*$pattern} #retuns body+++pri
			#body=${body%$pattern*} #returns body
			#num=${line%%$pattern*}
			#pri=${line##*$pattern}
			priStr=$(returnPriorityStatus $pri)
			if [[ -n $tag ]] && [[ $tag != $EMPTYTAG ]]; then
				echo -e "$colr $num $reset:$priStr $flsh $tag $reset $body"
			else
				echo -e "$colr $num $reset:$priStr $body"
			fi
		done < "$file"
	else
		echo -e "\033[37;44m EMPTY TODOs \033[0m"
	fi
else
	if [[ -a $file ]];
	then
		numberNow=$(generateNum)
		echo "$numberNow+++$TAGIN+++$1+++$PRIORITYIN" >> "$file"
	else
		touch "$file"
		echo "0+++$TAGIN+++$1+++$PRIORITYIN" > "$file"
	fi
	echo "Added to the list..."
fi
